// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/realm76/ranger/ent/node"
	"github.com/realm76/ranger/ent/nodetimeentry"
	"github.com/realm76/ranger/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeNode          = "Node"
	TypeNodeTimeEntry = "NodeTimeEntry"
)

// NodeMutation represents an operation that mutates the Node nodes in the graph.
type NodeMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	parent_handle       *string
	title               *string
	handle              *string
	clearedFields       map[string]struct{}
	time_entries        map[int]struct{}
	removedtime_entries map[int]struct{}
	clearedtime_entries bool
	done                bool
	oldValue            func(context.Context) (*Node, error)
	predicates          []predicate.Node
}

var _ ent.Mutation = (*NodeMutation)(nil)

// nodeOption allows management of the mutation configuration using functional options.
type nodeOption func(*NodeMutation)

// newNodeMutation creates new mutation for the Node entity.
func newNodeMutation(c config, op Op, opts ...nodeOption) *NodeMutation {
	m := &NodeMutation{
		config:        c,
		op:            op,
		typ:           TypeNode,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNodeID sets the ID field of the mutation.
func withNodeID(id int) nodeOption {
	return func(m *NodeMutation) {
		var (
			err   error
			once  sync.Once
			value *Node
		)
		m.oldValue = func(ctx context.Context) (*Node, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Node.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNode sets the old Node of the mutation.
func withNode(node *Node) nodeOption {
	return func(m *NodeMutation) {
		m.oldValue = func(context.Context) (*Node, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NodeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NodeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NodeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NodeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Node.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetParentHandle sets the "parent_handle" field.
func (m *NodeMutation) SetParentHandle(s string) {
	m.parent_handle = &s
}

// ParentHandle returns the value of the "parent_handle" field in the mutation.
func (m *NodeMutation) ParentHandle() (r string, exists bool) {
	v := m.parent_handle
	if v == nil {
		return
	}
	return *v, true
}

// OldParentHandle returns the old "parent_handle" field's value of the Node entity.
// If the Node object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeMutation) OldParentHandle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentHandle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentHandle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentHandle: %w", err)
	}
	return oldValue.ParentHandle, nil
}

// ClearParentHandle clears the value of the "parent_handle" field.
func (m *NodeMutation) ClearParentHandle() {
	m.parent_handle = nil
	m.clearedFields[node.FieldParentHandle] = struct{}{}
}

// ParentHandleCleared returns if the "parent_handle" field was cleared in this mutation.
func (m *NodeMutation) ParentHandleCleared() bool {
	_, ok := m.clearedFields[node.FieldParentHandle]
	return ok
}

// ResetParentHandle resets all changes to the "parent_handle" field.
func (m *NodeMutation) ResetParentHandle() {
	m.parent_handle = nil
	delete(m.clearedFields, node.FieldParentHandle)
}

// SetTitle sets the "title" field.
func (m *NodeMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *NodeMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Node entity.
// If the Node object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *NodeMutation) ResetTitle() {
	m.title = nil
}

// SetHandle sets the "handle" field.
func (m *NodeMutation) SetHandle(s string) {
	m.handle = &s
}

// Handle returns the value of the "handle" field in the mutation.
func (m *NodeMutation) Handle() (r string, exists bool) {
	v := m.handle
	if v == nil {
		return
	}
	return *v, true
}

// OldHandle returns the old "handle" field's value of the Node entity.
// If the Node object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeMutation) OldHandle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHandle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHandle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHandle: %w", err)
	}
	return oldValue.Handle, nil
}

// ResetHandle resets all changes to the "handle" field.
func (m *NodeMutation) ResetHandle() {
	m.handle = nil
}

// AddTimeEntryIDs adds the "time_entries" edge to the NodeTimeEntry entity by ids.
func (m *NodeMutation) AddTimeEntryIDs(ids ...int) {
	if m.time_entries == nil {
		m.time_entries = make(map[int]struct{})
	}
	for i := range ids {
		m.time_entries[ids[i]] = struct{}{}
	}
}

// ClearTimeEntries clears the "time_entries" edge to the NodeTimeEntry entity.
func (m *NodeMutation) ClearTimeEntries() {
	m.clearedtime_entries = true
}

// TimeEntriesCleared reports if the "time_entries" edge to the NodeTimeEntry entity was cleared.
func (m *NodeMutation) TimeEntriesCleared() bool {
	return m.clearedtime_entries
}

// RemoveTimeEntryIDs removes the "time_entries" edge to the NodeTimeEntry entity by IDs.
func (m *NodeMutation) RemoveTimeEntryIDs(ids ...int) {
	if m.removedtime_entries == nil {
		m.removedtime_entries = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.time_entries, ids[i])
		m.removedtime_entries[ids[i]] = struct{}{}
	}
}

// RemovedTimeEntries returns the removed IDs of the "time_entries" edge to the NodeTimeEntry entity.
func (m *NodeMutation) RemovedTimeEntriesIDs() (ids []int) {
	for id := range m.removedtime_entries {
		ids = append(ids, id)
	}
	return
}

// TimeEntriesIDs returns the "time_entries" edge IDs in the mutation.
func (m *NodeMutation) TimeEntriesIDs() (ids []int) {
	for id := range m.time_entries {
		ids = append(ids, id)
	}
	return
}

// ResetTimeEntries resets all changes to the "time_entries" edge.
func (m *NodeMutation) ResetTimeEntries() {
	m.time_entries = nil
	m.clearedtime_entries = false
	m.removedtime_entries = nil
}

// Where appends a list predicates to the NodeMutation builder.
func (m *NodeMutation) Where(ps ...predicate.Node) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NodeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NodeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Node, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NodeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NodeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Node).
func (m *NodeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NodeMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.parent_handle != nil {
		fields = append(fields, node.FieldParentHandle)
	}
	if m.title != nil {
		fields = append(fields, node.FieldTitle)
	}
	if m.handle != nil {
		fields = append(fields, node.FieldHandle)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NodeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case node.FieldParentHandle:
		return m.ParentHandle()
	case node.FieldTitle:
		return m.Title()
	case node.FieldHandle:
		return m.Handle()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NodeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case node.FieldParentHandle:
		return m.OldParentHandle(ctx)
	case node.FieldTitle:
		return m.OldTitle(ctx)
	case node.FieldHandle:
		return m.OldHandle(ctx)
	}
	return nil, fmt.Errorf("unknown Node field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NodeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case node.FieldParentHandle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentHandle(v)
		return nil
	case node.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case node.FieldHandle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHandle(v)
		return nil
	}
	return fmt.Errorf("unknown Node field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NodeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NodeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NodeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Node numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NodeMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(node.FieldParentHandle) {
		fields = append(fields, node.FieldParentHandle)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NodeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NodeMutation) ClearField(name string) error {
	switch name {
	case node.FieldParentHandle:
		m.ClearParentHandle()
		return nil
	}
	return fmt.Errorf("unknown Node nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NodeMutation) ResetField(name string) error {
	switch name {
	case node.FieldParentHandle:
		m.ResetParentHandle()
		return nil
	case node.FieldTitle:
		m.ResetTitle()
		return nil
	case node.FieldHandle:
		m.ResetHandle()
		return nil
	}
	return fmt.Errorf("unknown Node field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NodeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.time_entries != nil {
		edges = append(edges, node.EdgeTimeEntries)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NodeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case node.EdgeTimeEntries:
		ids := make([]ent.Value, 0, len(m.time_entries))
		for id := range m.time_entries {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NodeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedtime_entries != nil {
		edges = append(edges, node.EdgeTimeEntries)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NodeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case node.EdgeTimeEntries:
		ids := make([]ent.Value, 0, len(m.removedtime_entries))
		for id := range m.removedtime_entries {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NodeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedtime_entries {
		edges = append(edges, node.EdgeTimeEntries)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NodeMutation) EdgeCleared(name string) bool {
	switch name {
	case node.EdgeTimeEntries:
		return m.clearedtime_entries
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NodeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Node unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NodeMutation) ResetEdge(name string) error {
	switch name {
	case node.EdgeTimeEntries:
		m.ResetTimeEntries()
		return nil
	}
	return fmt.Errorf("unknown Node edge %s", name)
}

// NodeTimeEntryMutation represents an operation that mutates the NodeTimeEntry nodes in the graph.
type NodeTimeEntryMutation struct {
	config
	op            Op
	typ           string
	id            *int
	nodeId        *int
	addnodeId     *int
	startTime     *time.Time
	endTime       *time.Time
	clearedFields map[string]struct{}
	node          *int
	clearednode   bool
	done          bool
	oldValue      func(context.Context) (*NodeTimeEntry, error)
	predicates    []predicate.NodeTimeEntry
}

var _ ent.Mutation = (*NodeTimeEntryMutation)(nil)

// nodetimeentryOption allows management of the mutation configuration using functional options.
type nodetimeentryOption func(*NodeTimeEntryMutation)

// newNodeTimeEntryMutation creates new mutation for the NodeTimeEntry entity.
func newNodeTimeEntryMutation(c config, op Op, opts ...nodetimeentryOption) *NodeTimeEntryMutation {
	m := &NodeTimeEntryMutation{
		config:        c,
		op:            op,
		typ:           TypeNodeTimeEntry,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNodeTimeEntryID sets the ID field of the mutation.
func withNodeTimeEntryID(id int) nodetimeentryOption {
	return func(m *NodeTimeEntryMutation) {
		var (
			err   error
			once  sync.Once
			value *NodeTimeEntry
		)
		m.oldValue = func(ctx context.Context) (*NodeTimeEntry, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NodeTimeEntry.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNodeTimeEntry sets the old NodeTimeEntry of the mutation.
func withNodeTimeEntry(node *NodeTimeEntry) nodetimeentryOption {
	return func(m *NodeTimeEntryMutation) {
		m.oldValue = func(context.Context) (*NodeTimeEntry, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NodeTimeEntryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NodeTimeEntryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NodeTimeEntryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NodeTimeEntryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NodeTimeEntry.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetNodeId sets the "nodeId" field.
func (m *NodeTimeEntryMutation) SetNodeId(i int) {
	m.nodeId = &i
	m.addnodeId = nil
}

// NodeId returns the value of the "nodeId" field in the mutation.
func (m *NodeTimeEntryMutation) NodeId() (r int, exists bool) {
	v := m.nodeId
	if v == nil {
		return
	}
	return *v, true
}

// OldNodeId returns the old "nodeId" field's value of the NodeTimeEntry entity.
// If the NodeTimeEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeTimeEntryMutation) OldNodeId(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNodeId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNodeId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNodeId: %w", err)
	}
	return oldValue.NodeId, nil
}

// AddNodeId adds i to the "nodeId" field.
func (m *NodeTimeEntryMutation) AddNodeId(i int) {
	if m.addnodeId != nil {
		*m.addnodeId += i
	} else {
		m.addnodeId = &i
	}
}

// AddedNodeId returns the value that was added to the "nodeId" field in this mutation.
func (m *NodeTimeEntryMutation) AddedNodeId() (r int, exists bool) {
	v := m.addnodeId
	if v == nil {
		return
	}
	return *v, true
}

// ResetNodeId resets all changes to the "nodeId" field.
func (m *NodeTimeEntryMutation) ResetNodeId() {
	m.nodeId = nil
	m.addnodeId = nil
}

// SetStartTime sets the "startTime" field.
func (m *NodeTimeEntryMutation) SetStartTime(t time.Time) {
	m.startTime = &t
}

// StartTime returns the value of the "startTime" field in the mutation.
func (m *NodeTimeEntryMutation) StartTime() (r time.Time, exists bool) {
	v := m.startTime
	if v == nil {
		return
	}
	return *v, true
}

// OldStartTime returns the old "startTime" field's value of the NodeTimeEntry entity.
// If the NodeTimeEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeTimeEntryMutation) OldStartTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartTime: %w", err)
	}
	return oldValue.StartTime, nil
}

// ResetStartTime resets all changes to the "startTime" field.
func (m *NodeTimeEntryMutation) ResetStartTime() {
	m.startTime = nil
}

// SetEndTime sets the "endTime" field.
func (m *NodeTimeEntryMutation) SetEndTime(t time.Time) {
	m.endTime = &t
}

// EndTime returns the value of the "endTime" field in the mutation.
func (m *NodeTimeEntryMutation) EndTime() (r time.Time, exists bool) {
	v := m.endTime
	if v == nil {
		return
	}
	return *v, true
}

// OldEndTime returns the old "endTime" field's value of the NodeTimeEntry entity.
// If the NodeTimeEntry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeTimeEntryMutation) OldEndTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndTime: %w", err)
	}
	return oldValue.EndTime, nil
}

// ResetEndTime resets all changes to the "endTime" field.
func (m *NodeTimeEntryMutation) ResetEndTime() {
	m.endTime = nil
}

// SetNodeID sets the "node" edge to the Node entity by id.
func (m *NodeTimeEntryMutation) SetNodeID(id int) {
	m.node = &id
}

// ClearNode clears the "node" edge to the Node entity.
func (m *NodeTimeEntryMutation) ClearNode() {
	m.clearednode = true
}

// NodeCleared reports if the "node" edge to the Node entity was cleared.
func (m *NodeTimeEntryMutation) NodeCleared() bool {
	return m.clearednode
}

// NodeID returns the "node" edge ID in the mutation.
func (m *NodeTimeEntryMutation) NodeID() (id int, exists bool) {
	if m.node != nil {
		return *m.node, true
	}
	return
}

// NodeIDs returns the "node" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// NodeID instead. It exists only for internal usage by the builders.
func (m *NodeTimeEntryMutation) NodeIDs() (ids []int) {
	if id := m.node; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetNode resets all changes to the "node" edge.
func (m *NodeTimeEntryMutation) ResetNode() {
	m.node = nil
	m.clearednode = false
}

// Where appends a list predicates to the NodeTimeEntryMutation builder.
func (m *NodeTimeEntryMutation) Where(ps ...predicate.NodeTimeEntry) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the NodeTimeEntryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *NodeTimeEntryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.NodeTimeEntry, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *NodeTimeEntryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *NodeTimeEntryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (NodeTimeEntry).
func (m *NodeTimeEntryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NodeTimeEntryMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.nodeId != nil {
		fields = append(fields, nodetimeentry.FieldNodeId)
	}
	if m.startTime != nil {
		fields = append(fields, nodetimeentry.FieldStartTime)
	}
	if m.endTime != nil {
		fields = append(fields, nodetimeentry.FieldEndTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NodeTimeEntryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case nodetimeentry.FieldNodeId:
		return m.NodeId()
	case nodetimeentry.FieldStartTime:
		return m.StartTime()
	case nodetimeentry.FieldEndTime:
		return m.EndTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NodeTimeEntryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case nodetimeentry.FieldNodeId:
		return m.OldNodeId(ctx)
	case nodetimeentry.FieldStartTime:
		return m.OldStartTime(ctx)
	case nodetimeentry.FieldEndTime:
		return m.OldEndTime(ctx)
	}
	return nil, fmt.Errorf("unknown NodeTimeEntry field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NodeTimeEntryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case nodetimeentry.FieldNodeId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNodeId(v)
		return nil
	case nodetimeentry.FieldStartTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartTime(v)
		return nil
	case nodetimeentry.FieldEndTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndTime(v)
		return nil
	}
	return fmt.Errorf("unknown NodeTimeEntry field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NodeTimeEntryMutation) AddedFields() []string {
	var fields []string
	if m.addnodeId != nil {
		fields = append(fields, nodetimeentry.FieldNodeId)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NodeTimeEntryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case nodetimeentry.FieldNodeId:
		return m.AddedNodeId()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NodeTimeEntryMutation) AddField(name string, value ent.Value) error {
	switch name {
	case nodetimeentry.FieldNodeId:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNodeId(v)
		return nil
	}
	return fmt.Errorf("unknown NodeTimeEntry numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NodeTimeEntryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NodeTimeEntryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NodeTimeEntryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown NodeTimeEntry nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NodeTimeEntryMutation) ResetField(name string) error {
	switch name {
	case nodetimeentry.FieldNodeId:
		m.ResetNodeId()
		return nil
	case nodetimeentry.FieldStartTime:
		m.ResetStartTime()
		return nil
	case nodetimeentry.FieldEndTime:
		m.ResetEndTime()
		return nil
	}
	return fmt.Errorf("unknown NodeTimeEntry field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NodeTimeEntryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.node != nil {
		edges = append(edges, nodetimeentry.EdgeNode)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NodeTimeEntryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case nodetimeentry.EdgeNode:
		if id := m.node; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NodeTimeEntryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NodeTimeEntryMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NodeTimeEntryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearednode {
		edges = append(edges, nodetimeentry.EdgeNode)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NodeTimeEntryMutation) EdgeCleared(name string) bool {
	switch name {
	case nodetimeentry.EdgeNode:
		return m.clearednode
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NodeTimeEntryMutation) ClearEdge(name string) error {
	switch name {
	case nodetimeentry.EdgeNode:
		m.ClearNode()
		return nil
	}
	return fmt.Errorf("unknown NodeTimeEntry unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NodeTimeEntryMutation) ResetEdge(name string) error {
	switch name {
	case nodetimeentry.EdgeNode:
		m.ResetNode()
		return nil
	}
	return fmt.Errorf("unknown NodeTimeEntry edge %s", name)
}
