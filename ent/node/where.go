// Code generated by ent, DO NOT EDIT.

package node

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/realm76/ranger/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldID, id))
}

// ParentHandle applies equality check predicate on the "parent_handle" field. It's identical to ParentHandleEQ.
func ParentHandle(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldParentHandle, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldTitle, v))
}

// Handle applies equality check predicate on the "handle" field. It's identical to HandleEQ.
func Handle(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldHandle, v))
}

// ParentHandleEQ applies the EQ predicate on the "parent_handle" field.
func ParentHandleEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldParentHandle, v))
}

// ParentHandleNEQ applies the NEQ predicate on the "parent_handle" field.
func ParentHandleNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldParentHandle, v))
}

// ParentHandleIn applies the In predicate on the "parent_handle" field.
func ParentHandleIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldParentHandle, vs...))
}

// ParentHandleNotIn applies the NotIn predicate on the "parent_handle" field.
func ParentHandleNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldParentHandle, vs...))
}

// ParentHandleGT applies the GT predicate on the "parent_handle" field.
func ParentHandleGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldParentHandle, v))
}

// ParentHandleGTE applies the GTE predicate on the "parent_handle" field.
func ParentHandleGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldParentHandle, v))
}

// ParentHandleLT applies the LT predicate on the "parent_handle" field.
func ParentHandleLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldParentHandle, v))
}

// ParentHandleLTE applies the LTE predicate on the "parent_handle" field.
func ParentHandleLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldParentHandle, v))
}

// ParentHandleContains applies the Contains predicate on the "parent_handle" field.
func ParentHandleContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldParentHandle, v))
}

// ParentHandleHasPrefix applies the HasPrefix predicate on the "parent_handle" field.
func ParentHandleHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldParentHandle, v))
}

// ParentHandleHasSuffix applies the HasSuffix predicate on the "parent_handle" field.
func ParentHandleHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldParentHandle, v))
}

// ParentHandleIsNil applies the IsNil predicate on the "parent_handle" field.
func ParentHandleIsNil() predicate.Node {
	return predicate.Node(sql.FieldIsNull(FieldParentHandle))
}

// ParentHandleNotNil applies the NotNil predicate on the "parent_handle" field.
func ParentHandleNotNil() predicate.Node {
	return predicate.Node(sql.FieldNotNull(FieldParentHandle))
}

// ParentHandleEqualFold applies the EqualFold predicate on the "parent_handle" field.
func ParentHandleEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldParentHandle, v))
}

// ParentHandleContainsFold applies the ContainsFold predicate on the "parent_handle" field.
func ParentHandleContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldParentHandle, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldTitle, v))
}

// HandleEQ applies the EQ predicate on the "handle" field.
func HandleEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldEQ(FieldHandle, v))
}

// HandleNEQ applies the NEQ predicate on the "handle" field.
func HandleNEQ(v string) predicate.Node {
	return predicate.Node(sql.FieldNEQ(FieldHandle, v))
}

// HandleIn applies the In predicate on the "handle" field.
func HandleIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldIn(FieldHandle, vs...))
}

// HandleNotIn applies the NotIn predicate on the "handle" field.
func HandleNotIn(vs ...string) predicate.Node {
	return predicate.Node(sql.FieldNotIn(FieldHandle, vs...))
}

// HandleGT applies the GT predicate on the "handle" field.
func HandleGT(v string) predicate.Node {
	return predicate.Node(sql.FieldGT(FieldHandle, v))
}

// HandleGTE applies the GTE predicate on the "handle" field.
func HandleGTE(v string) predicate.Node {
	return predicate.Node(sql.FieldGTE(FieldHandle, v))
}

// HandleLT applies the LT predicate on the "handle" field.
func HandleLT(v string) predicate.Node {
	return predicate.Node(sql.FieldLT(FieldHandle, v))
}

// HandleLTE applies the LTE predicate on the "handle" field.
func HandleLTE(v string) predicate.Node {
	return predicate.Node(sql.FieldLTE(FieldHandle, v))
}

// HandleContains applies the Contains predicate on the "handle" field.
func HandleContains(v string) predicate.Node {
	return predicate.Node(sql.FieldContains(FieldHandle, v))
}

// HandleHasPrefix applies the HasPrefix predicate on the "handle" field.
func HandleHasPrefix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasPrefix(FieldHandle, v))
}

// HandleHasSuffix applies the HasSuffix predicate on the "handle" field.
func HandleHasSuffix(v string) predicate.Node {
	return predicate.Node(sql.FieldHasSuffix(FieldHandle, v))
}

// HandleEqualFold applies the EqualFold predicate on the "handle" field.
func HandleEqualFold(v string) predicate.Node {
	return predicate.Node(sql.FieldEqualFold(FieldHandle, v))
}

// HandleContainsFold applies the ContainsFold predicate on the "handle" field.
func HandleContainsFold(v string) predicate.Node {
	return predicate.Node(sql.FieldContainsFold(FieldHandle, v))
}

// HasTimeEntries applies the HasEdge predicate on the "time_entries" edge.
func HasTimeEntries() predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TimeEntriesTable, TimeEntriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTimeEntriesWith applies the HasEdge predicate on the "time_entries" edge with a given conditions (other predicates).
func HasTimeEntriesWith(preds ...predicate.NodeTimeEntry) predicate.Node {
	return predicate.Node(func(s *sql.Selector) {
		step := newTimeEntriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Node) predicate.Node {
	return predicate.Node(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Node) predicate.Node {
	return predicate.Node(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Node) predicate.Node {
	return predicate.Node(sql.NotPredicates(p))
}
