// Code generated by ent, DO NOT EDIT.

package node

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the node type in the database.
	Label = "node"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldParentHandle holds the string denoting the parent_handle field in the database.
	FieldParentHandle = "parent_handle"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldHandle holds the string denoting the handle field in the database.
	FieldHandle = "handle"
	// EdgeTimeEntries holds the string denoting the time_entries edge name in mutations.
	EdgeTimeEntries = "time_entries"
	// Table holds the table name of the node in the database.
	Table = "nodes"
	// TimeEntriesTable is the table that holds the time_entries relation/edge.
	TimeEntriesTable = "node_time_entries"
	// TimeEntriesInverseTable is the table name for the NodeTimeEntry entity.
	// It exists in this package in order to avoid circular dependency with the "nodetimeentry" package.
	TimeEntriesInverseTable = "node_time_entries"
	// TimeEntriesColumn is the table column denoting the time_entries relation/edge.
	TimeEntriesColumn = "node_time_entries"
)

// Columns holds all SQL columns for node fields.
var Columns = []string{
	FieldID,
	FieldParentHandle,
	FieldTitle,
	FieldHandle,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Node queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByParentHandle orders the results by the parent_handle field.
func ByParentHandle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentHandle, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByHandle orders the results by the handle field.
func ByHandle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHandle, opts...).ToFunc()
}

// ByTimeEntriesCount orders the results by time_entries count.
func ByTimeEntriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTimeEntriesStep(), opts...)
	}
}

// ByTimeEntries orders the results by time_entries terms.
func ByTimeEntries(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTimeEntriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTimeEntriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TimeEntriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TimeEntriesTable, TimeEntriesColumn),
	)
}
