// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/realm76/ranger/ent/node"
	"github.com/realm76/ranger/ent/nodetimeentry"
	"github.com/realm76/ranger/ent/predicate"
)

// NodeTimeEntryUpdate is the builder for updating NodeTimeEntry entities.
type NodeTimeEntryUpdate struct {
	config
	hooks    []Hook
	mutation *NodeTimeEntryMutation
}

// Where appends a list predicates to the NodeTimeEntryUpdate builder.
func (nteu *NodeTimeEntryUpdate) Where(ps ...predicate.NodeTimeEntry) *NodeTimeEntryUpdate {
	nteu.mutation.Where(ps...)
	return nteu
}

// SetNodeId sets the "nodeId" field.
func (nteu *NodeTimeEntryUpdate) SetNodeId(i int) *NodeTimeEntryUpdate {
	nteu.mutation.ResetNodeId()
	nteu.mutation.SetNodeId(i)
	return nteu
}

// SetNillableNodeId sets the "nodeId" field if the given value is not nil.
func (nteu *NodeTimeEntryUpdate) SetNillableNodeId(i *int) *NodeTimeEntryUpdate {
	if i != nil {
		nteu.SetNodeId(*i)
	}
	return nteu
}

// AddNodeId adds i to the "nodeId" field.
func (nteu *NodeTimeEntryUpdate) AddNodeId(i int) *NodeTimeEntryUpdate {
	nteu.mutation.AddNodeId(i)
	return nteu
}

// SetStartTime sets the "startTime" field.
func (nteu *NodeTimeEntryUpdate) SetStartTime(t time.Time) *NodeTimeEntryUpdate {
	nteu.mutation.SetStartTime(t)
	return nteu
}

// SetNillableStartTime sets the "startTime" field if the given value is not nil.
func (nteu *NodeTimeEntryUpdate) SetNillableStartTime(t *time.Time) *NodeTimeEntryUpdate {
	if t != nil {
		nteu.SetStartTime(*t)
	}
	return nteu
}

// SetEndTime sets the "endTime" field.
func (nteu *NodeTimeEntryUpdate) SetEndTime(t time.Time) *NodeTimeEntryUpdate {
	nteu.mutation.SetEndTime(t)
	return nteu
}

// SetNillableEndTime sets the "endTime" field if the given value is not nil.
func (nteu *NodeTimeEntryUpdate) SetNillableEndTime(t *time.Time) *NodeTimeEntryUpdate {
	if t != nil {
		nteu.SetEndTime(*t)
	}
	return nteu
}

// SetNodeID sets the "node" edge to the Node entity by ID.
func (nteu *NodeTimeEntryUpdate) SetNodeID(id int) *NodeTimeEntryUpdate {
	nteu.mutation.SetNodeID(id)
	return nteu
}

// SetNillableNodeID sets the "node" edge to the Node entity by ID if the given value is not nil.
func (nteu *NodeTimeEntryUpdate) SetNillableNodeID(id *int) *NodeTimeEntryUpdate {
	if id != nil {
		nteu = nteu.SetNodeID(*id)
	}
	return nteu
}

// SetNode sets the "node" edge to the Node entity.
func (nteu *NodeTimeEntryUpdate) SetNode(n *Node) *NodeTimeEntryUpdate {
	return nteu.SetNodeID(n.ID)
}

// Mutation returns the NodeTimeEntryMutation object of the builder.
func (nteu *NodeTimeEntryUpdate) Mutation() *NodeTimeEntryMutation {
	return nteu.mutation
}

// ClearNode clears the "node" edge to the Node entity.
func (nteu *NodeTimeEntryUpdate) ClearNode() *NodeTimeEntryUpdate {
	nteu.mutation.ClearNode()
	return nteu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nteu *NodeTimeEntryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nteu.sqlSave, nteu.mutation, nteu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nteu *NodeTimeEntryUpdate) SaveX(ctx context.Context) int {
	affected, err := nteu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nteu *NodeTimeEntryUpdate) Exec(ctx context.Context) error {
	_, err := nteu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nteu *NodeTimeEntryUpdate) ExecX(ctx context.Context) {
	if err := nteu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nteu *NodeTimeEntryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(nodetimeentry.Table, nodetimeentry.Columns, sqlgraph.NewFieldSpec(nodetimeentry.FieldID, field.TypeInt))
	if ps := nteu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nteu.mutation.NodeId(); ok {
		_spec.SetField(nodetimeentry.FieldNodeId, field.TypeInt, value)
	}
	if value, ok := nteu.mutation.AddedNodeId(); ok {
		_spec.AddField(nodetimeentry.FieldNodeId, field.TypeInt, value)
	}
	if value, ok := nteu.mutation.StartTime(); ok {
		_spec.SetField(nodetimeentry.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := nteu.mutation.EndTime(); ok {
		_spec.SetField(nodetimeentry.FieldEndTime, field.TypeTime, value)
	}
	if nteu.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nodetimeentry.NodeTable,
			Columns: []string{nodetimeentry.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nteu.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nodetimeentry.NodeTable,
			Columns: []string{nodetimeentry.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nteu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nodetimeentry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nteu.mutation.done = true
	return n, nil
}

// NodeTimeEntryUpdateOne is the builder for updating a single NodeTimeEntry entity.
type NodeTimeEntryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NodeTimeEntryMutation
}

// SetNodeId sets the "nodeId" field.
func (nteuo *NodeTimeEntryUpdateOne) SetNodeId(i int) *NodeTimeEntryUpdateOne {
	nteuo.mutation.ResetNodeId()
	nteuo.mutation.SetNodeId(i)
	return nteuo
}

// SetNillableNodeId sets the "nodeId" field if the given value is not nil.
func (nteuo *NodeTimeEntryUpdateOne) SetNillableNodeId(i *int) *NodeTimeEntryUpdateOne {
	if i != nil {
		nteuo.SetNodeId(*i)
	}
	return nteuo
}

// AddNodeId adds i to the "nodeId" field.
func (nteuo *NodeTimeEntryUpdateOne) AddNodeId(i int) *NodeTimeEntryUpdateOne {
	nteuo.mutation.AddNodeId(i)
	return nteuo
}

// SetStartTime sets the "startTime" field.
func (nteuo *NodeTimeEntryUpdateOne) SetStartTime(t time.Time) *NodeTimeEntryUpdateOne {
	nteuo.mutation.SetStartTime(t)
	return nteuo
}

// SetNillableStartTime sets the "startTime" field if the given value is not nil.
func (nteuo *NodeTimeEntryUpdateOne) SetNillableStartTime(t *time.Time) *NodeTimeEntryUpdateOne {
	if t != nil {
		nteuo.SetStartTime(*t)
	}
	return nteuo
}

// SetEndTime sets the "endTime" field.
func (nteuo *NodeTimeEntryUpdateOne) SetEndTime(t time.Time) *NodeTimeEntryUpdateOne {
	nteuo.mutation.SetEndTime(t)
	return nteuo
}

// SetNillableEndTime sets the "endTime" field if the given value is not nil.
func (nteuo *NodeTimeEntryUpdateOne) SetNillableEndTime(t *time.Time) *NodeTimeEntryUpdateOne {
	if t != nil {
		nteuo.SetEndTime(*t)
	}
	return nteuo
}

// SetNodeID sets the "node" edge to the Node entity by ID.
func (nteuo *NodeTimeEntryUpdateOne) SetNodeID(id int) *NodeTimeEntryUpdateOne {
	nteuo.mutation.SetNodeID(id)
	return nteuo
}

// SetNillableNodeID sets the "node" edge to the Node entity by ID if the given value is not nil.
func (nteuo *NodeTimeEntryUpdateOne) SetNillableNodeID(id *int) *NodeTimeEntryUpdateOne {
	if id != nil {
		nteuo = nteuo.SetNodeID(*id)
	}
	return nteuo
}

// SetNode sets the "node" edge to the Node entity.
func (nteuo *NodeTimeEntryUpdateOne) SetNode(n *Node) *NodeTimeEntryUpdateOne {
	return nteuo.SetNodeID(n.ID)
}

// Mutation returns the NodeTimeEntryMutation object of the builder.
func (nteuo *NodeTimeEntryUpdateOne) Mutation() *NodeTimeEntryMutation {
	return nteuo.mutation
}

// ClearNode clears the "node" edge to the Node entity.
func (nteuo *NodeTimeEntryUpdateOne) ClearNode() *NodeTimeEntryUpdateOne {
	nteuo.mutation.ClearNode()
	return nteuo
}

// Where appends a list predicates to the NodeTimeEntryUpdate builder.
func (nteuo *NodeTimeEntryUpdateOne) Where(ps ...predicate.NodeTimeEntry) *NodeTimeEntryUpdateOne {
	nteuo.mutation.Where(ps...)
	return nteuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nteuo *NodeTimeEntryUpdateOne) Select(field string, fields ...string) *NodeTimeEntryUpdateOne {
	nteuo.fields = append([]string{field}, fields...)
	return nteuo
}

// Save executes the query and returns the updated NodeTimeEntry entity.
func (nteuo *NodeTimeEntryUpdateOne) Save(ctx context.Context) (*NodeTimeEntry, error) {
	return withHooks(ctx, nteuo.sqlSave, nteuo.mutation, nteuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nteuo *NodeTimeEntryUpdateOne) SaveX(ctx context.Context) *NodeTimeEntry {
	node, err := nteuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nteuo *NodeTimeEntryUpdateOne) Exec(ctx context.Context) error {
	_, err := nteuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nteuo *NodeTimeEntryUpdateOne) ExecX(ctx context.Context) {
	if err := nteuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nteuo *NodeTimeEntryUpdateOne) sqlSave(ctx context.Context) (_node *NodeTimeEntry, err error) {
	_spec := sqlgraph.NewUpdateSpec(nodetimeentry.Table, nodetimeentry.Columns, sqlgraph.NewFieldSpec(nodetimeentry.FieldID, field.TypeInt))
	id, ok := nteuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NodeTimeEntry.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nteuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nodetimeentry.FieldID)
		for _, f := range fields {
			if !nodetimeentry.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != nodetimeentry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nteuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nteuo.mutation.NodeId(); ok {
		_spec.SetField(nodetimeentry.FieldNodeId, field.TypeInt, value)
	}
	if value, ok := nteuo.mutation.AddedNodeId(); ok {
		_spec.AddField(nodetimeentry.FieldNodeId, field.TypeInt, value)
	}
	if value, ok := nteuo.mutation.StartTime(); ok {
		_spec.SetField(nodetimeentry.FieldStartTime, field.TypeTime, value)
	}
	if value, ok := nteuo.mutation.EndTime(); ok {
		_spec.SetField(nodetimeentry.FieldEndTime, field.TypeTime, value)
	}
	if nteuo.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nodetimeentry.NodeTable,
			Columns: []string{nodetimeentry.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nteuo.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nodetimeentry.NodeTable,
			Columns: []string{nodetimeentry.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NodeTimeEntry{config: nteuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nteuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nodetimeentry.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nteuo.mutation.done = true
	return _node, nil
}
