// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/realm76/ranger/ent/node"
	"github.com/realm76/ranger/ent/nodetimeentry"
)

// NodeTimeEntryCreate is the builder for creating a NodeTimeEntry entity.
type NodeTimeEntryCreate struct {
	config
	mutation *NodeTimeEntryMutation
	hooks    []Hook
}

// SetNodeId sets the "nodeId" field.
func (ntec *NodeTimeEntryCreate) SetNodeId(i int) *NodeTimeEntryCreate {
	ntec.mutation.SetNodeId(i)
	return ntec
}

// SetStartTime sets the "startTime" field.
func (ntec *NodeTimeEntryCreate) SetStartTime(t time.Time) *NodeTimeEntryCreate {
	ntec.mutation.SetStartTime(t)
	return ntec
}

// SetEndTime sets the "endTime" field.
func (ntec *NodeTimeEntryCreate) SetEndTime(t time.Time) *NodeTimeEntryCreate {
	ntec.mutation.SetEndTime(t)
	return ntec
}

// SetNodeID sets the "node" edge to the Node entity by ID.
func (ntec *NodeTimeEntryCreate) SetNodeID(id int) *NodeTimeEntryCreate {
	ntec.mutation.SetNodeID(id)
	return ntec
}

// SetNillableNodeID sets the "node" edge to the Node entity by ID if the given value is not nil.
func (ntec *NodeTimeEntryCreate) SetNillableNodeID(id *int) *NodeTimeEntryCreate {
	if id != nil {
		ntec = ntec.SetNodeID(*id)
	}
	return ntec
}

// SetNode sets the "node" edge to the Node entity.
func (ntec *NodeTimeEntryCreate) SetNode(n *Node) *NodeTimeEntryCreate {
	return ntec.SetNodeID(n.ID)
}

// Mutation returns the NodeTimeEntryMutation object of the builder.
func (ntec *NodeTimeEntryCreate) Mutation() *NodeTimeEntryMutation {
	return ntec.mutation
}

// Save creates the NodeTimeEntry in the database.
func (ntec *NodeTimeEntryCreate) Save(ctx context.Context) (*NodeTimeEntry, error) {
	return withHooks(ctx, ntec.sqlSave, ntec.mutation, ntec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ntec *NodeTimeEntryCreate) SaveX(ctx context.Context) *NodeTimeEntry {
	v, err := ntec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ntec *NodeTimeEntryCreate) Exec(ctx context.Context) error {
	_, err := ntec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntec *NodeTimeEntryCreate) ExecX(ctx context.Context) {
	if err := ntec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ntec *NodeTimeEntryCreate) check() error {
	if _, ok := ntec.mutation.NodeId(); !ok {
		return &ValidationError{Name: "nodeId", err: errors.New(`ent: missing required field "NodeTimeEntry.nodeId"`)}
	}
	if _, ok := ntec.mutation.StartTime(); !ok {
		return &ValidationError{Name: "startTime", err: errors.New(`ent: missing required field "NodeTimeEntry.startTime"`)}
	}
	if _, ok := ntec.mutation.EndTime(); !ok {
		return &ValidationError{Name: "endTime", err: errors.New(`ent: missing required field "NodeTimeEntry.endTime"`)}
	}
	return nil
}

func (ntec *NodeTimeEntryCreate) sqlSave(ctx context.Context) (*NodeTimeEntry, error) {
	if err := ntec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ntec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ntec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ntec.mutation.id = &_node.ID
	ntec.mutation.done = true
	return _node, nil
}

func (ntec *NodeTimeEntryCreate) createSpec() (*NodeTimeEntry, *sqlgraph.CreateSpec) {
	var (
		_node = &NodeTimeEntry{config: ntec.config}
		_spec = sqlgraph.NewCreateSpec(nodetimeentry.Table, sqlgraph.NewFieldSpec(nodetimeentry.FieldID, field.TypeInt))
	)
	if value, ok := ntec.mutation.NodeId(); ok {
		_spec.SetField(nodetimeentry.FieldNodeId, field.TypeInt, value)
		_node.NodeId = value
	}
	if value, ok := ntec.mutation.StartTime(); ok {
		_spec.SetField(nodetimeentry.FieldStartTime, field.TypeTime, value)
		_node.StartTime = value
	}
	if value, ok := ntec.mutation.EndTime(); ok {
		_spec.SetField(nodetimeentry.FieldEndTime, field.TypeTime, value)
		_node.EndTime = value
	}
	if nodes := ntec.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   nodetimeentry.NodeTable,
			Columns: []string{nodetimeentry.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.node_time_entries = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NodeTimeEntryCreateBulk is the builder for creating many NodeTimeEntry entities in bulk.
type NodeTimeEntryCreateBulk struct {
	config
	err      error
	builders []*NodeTimeEntryCreate
}

// Save creates the NodeTimeEntry entities in the database.
func (ntecb *NodeTimeEntryCreateBulk) Save(ctx context.Context) ([]*NodeTimeEntry, error) {
	if ntecb.err != nil {
		return nil, ntecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ntecb.builders))
	nodes := make([]*NodeTimeEntry, len(ntecb.builders))
	mutators := make([]Mutator, len(ntecb.builders))
	for i := range ntecb.builders {
		func(i int, root context.Context) {
			builder := ntecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NodeTimeEntryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ntecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ntecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ntecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ntecb *NodeTimeEntryCreateBulk) SaveX(ctx context.Context) []*NodeTimeEntry {
	v, err := ntecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ntecb *NodeTimeEntryCreateBulk) Exec(ctx context.Context) error {
	_, err := ntecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntecb *NodeTimeEntryCreateBulk) ExecX(ctx context.Context) {
	if err := ntecb.Exec(ctx); err != nil {
		panic(err)
	}
}
