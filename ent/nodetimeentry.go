// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/realm76/ranger/ent/node"
	"github.com/realm76/ranger/ent/nodetimeentry"
)

// NodeTimeEntry is the model entity for the NodeTimeEntry schema.
type NodeTimeEntry struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// NodeId holds the value of the "nodeId" field.
	NodeId int `json:"nodeId,omitempty"`
	// StartTime holds the value of the "startTime" field.
	StartTime time.Time `json:"startTime,omitempty"`
	// EndTime holds the value of the "endTime" field.
	EndTime time.Time `json:"endTime,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NodeTimeEntryQuery when eager-loading is set.
	Edges             NodeTimeEntryEdges `json:"edges"`
	node_time_entries *int
	selectValues      sql.SelectValues
}

// NodeTimeEntryEdges holds the relations/edges for other nodes in the graph.
type NodeTimeEntryEdges struct {
	// Node holds the value of the node edge.
	Node *Node `json:"node,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// NodeOrErr returns the Node value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NodeTimeEntryEdges) NodeOrErr() (*Node, error) {
	if e.Node != nil {
		return e.Node, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: node.Label}
	}
	return nil, &NotLoadedError{edge: "node"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NodeTimeEntry) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case nodetimeentry.FieldID, nodetimeentry.FieldNodeId:
			values[i] = new(sql.NullInt64)
		case nodetimeentry.FieldStartTime, nodetimeentry.FieldEndTime:
			values[i] = new(sql.NullTime)
		case nodetimeentry.ForeignKeys[0]: // node_time_entries
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NodeTimeEntry fields.
func (nte *NodeTimeEntry) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case nodetimeentry.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			nte.ID = int(value.Int64)
		case nodetimeentry.FieldNodeId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field nodeId", values[i])
			} else if value.Valid {
				nte.NodeId = int(value.Int64)
			}
		case nodetimeentry.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field startTime", values[i])
			} else if value.Valid {
				nte.StartTime = value.Time
			}
		case nodetimeentry.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field endTime", values[i])
			} else if value.Valid {
				nte.EndTime = value.Time
			}
		case nodetimeentry.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field node_time_entries", value)
			} else if value.Valid {
				nte.node_time_entries = new(int)
				*nte.node_time_entries = int(value.Int64)
			}
		default:
			nte.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the NodeTimeEntry.
// This includes values selected through modifiers, order, etc.
func (nte *NodeTimeEntry) Value(name string) (ent.Value, error) {
	return nte.selectValues.Get(name)
}

// QueryNode queries the "node" edge of the NodeTimeEntry entity.
func (nte *NodeTimeEntry) QueryNode() *NodeQuery {
	return NewNodeTimeEntryClient(nte.config).QueryNode(nte)
}

// Update returns a builder for updating this NodeTimeEntry.
// Note that you need to call NodeTimeEntry.Unwrap() before calling this method if this NodeTimeEntry
// was returned from a transaction, and the transaction was committed or rolled back.
func (nte *NodeTimeEntry) Update() *NodeTimeEntryUpdateOne {
	return NewNodeTimeEntryClient(nte.config).UpdateOne(nte)
}

// Unwrap unwraps the NodeTimeEntry entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nte *NodeTimeEntry) Unwrap() *NodeTimeEntry {
	_tx, ok := nte.config.driver.(*txDriver)
	if !ok {
		panic("ent: NodeTimeEntry is not a transactional entity")
	}
	nte.config.driver = _tx.drv
	return nte
}

// String implements the fmt.Stringer.
func (nte *NodeTimeEntry) String() string {
	var builder strings.Builder
	builder.WriteString("NodeTimeEntry(")
	builder.WriteString(fmt.Sprintf("id=%v, ", nte.ID))
	builder.WriteString("nodeId=")
	builder.WriteString(fmt.Sprintf("%v", nte.NodeId))
	builder.WriteString(", ")
	builder.WriteString("startTime=")
	builder.WriteString(nte.StartTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("endTime=")
	builder.WriteString(nte.EndTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// NodeTimeEntries is a parsable slice of NodeTimeEntry.
type NodeTimeEntries []*NodeTimeEntry
