// Code generated by ent, DO NOT EDIT.

package nodetimeentry

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/realm76/ranger/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldLTE(FieldID, id))
}

// NodeId applies equality check predicate on the "nodeId" field. It's identical to NodeIdEQ.
func NodeId(v int) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldEQ(FieldNodeId, v))
}

// StartTime applies equality check predicate on the "startTime" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldEQ(FieldStartTime, v))
}

// EndTime applies equality check predicate on the "endTime" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldEQ(FieldEndTime, v))
}

// NodeIdEQ applies the EQ predicate on the "nodeId" field.
func NodeIdEQ(v int) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldEQ(FieldNodeId, v))
}

// NodeIdNEQ applies the NEQ predicate on the "nodeId" field.
func NodeIdNEQ(v int) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldNEQ(FieldNodeId, v))
}

// NodeIdIn applies the In predicate on the "nodeId" field.
func NodeIdIn(vs ...int) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldIn(FieldNodeId, vs...))
}

// NodeIdNotIn applies the NotIn predicate on the "nodeId" field.
func NodeIdNotIn(vs ...int) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldNotIn(FieldNodeId, vs...))
}

// NodeIdGT applies the GT predicate on the "nodeId" field.
func NodeIdGT(v int) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldGT(FieldNodeId, v))
}

// NodeIdGTE applies the GTE predicate on the "nodeId" field.
func NodeIdGTE(v int) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldGTE(FieldNodeId, v))
}

// NodeIdLT applies the LT predicate on the "nodeId" field.
func NodeIdLT(v int) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldLT(FieldNodeId, v))
}

// NodeIdLTE applies the LTE predicate on the "nodeId" field.
func NodeIdLTE(v int) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldLTE(FieldNodeId, v))
}

// StartTimeEQ applies the EQ predicate on the "startTime" field.
func StartTimeEQ(v time.Time) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldEQ(FieldStartTime, v))
}

// StartTimeNEQ applies the NEQ predicate on the "startTime" field.
func StartTimeNEQ(v time.Time) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldNEQ(FieldStartTime, v))
}

// StartTimeIn applies the In predicate on the "startTime" field.
func StartTimeIn(vs ...time.Time) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldIn(FieldStartTime, vs...))
}

// StartTimeNotIn applies the NotIn predicate on the "startTime" field.
func StartTimeNotIn(vs ...time.Time) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldNotIn(FieldStartTime, vs...))
}

// StartTimeGT applies the GT predicate on the "startTime" field.
func StartTimeGT(v time.Time) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldGT(FieldStartTime, v))
}

// StartTimeGTE applies the GTE predicate on the "startTime" field.
func StartTimeGTE(v time.Time) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldGTE(FieldStartTime, v))
}

// StartTimeLT applies the LT predicate on the "startTime" field.
func StartTimeLT(v time.Time) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldLT(FieldStartTime, v))
}

// StartTimeLTE applies the LTE predicate on the "startTime" field.
func StartTimeLTE(v time.Time) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldLTE(FieldStartTime, v))
}

// EndTimeEQ applies the EQ predicate on the "endTime" field.
func EndTimeEQ(v time.Time) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldEQ(FieldEndTime, v))
}

// EndTimeNEQ applies the NEQ predicate on the "endTime" field.
func EndTimeNEQ(v time.Time) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldNEQ(FieldEndTime, v))
}

// EndTimeIn applies the In predicate on the "endTime" field.
func EndTimeIn(vs ...time.Time) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldIn(FieldEndTime, vs...))
}

// EndTimeNotIn applies the NotIn predicate on the "endTime" field.
func EndTimeNotIn(vs ...time.Time) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldNotIn(FieldEndTime, vs...))
}

// EndTimeGT applies the GT predicate on the "endTime" field.
func EndTimeGT(v time.Time) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldGT(FieldEndTime, v))
}

// EndTimeGTE applies the GTE predicate on the "endTime" field.
func EndTimeGTE(v time.Time) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldGTE(FieldEndTime, v))
}

// EndTimeLT applies the LT predicate on the "endTime" field.
func EndTimeLT(v time.Time) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldLT(FieldEndTime, v))
}

// EndTimeLTE applies the LTE predicate on the "endTime" field.
func EndTimeLTE(v time.Time) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.FieldLTE(FieldEndTime, v))
}

// HasNode applies the HasEdge predicate on the "node" edge.
func HasNode() predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NodeTable, NodeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNodeWith applies the HasEdge predicate on the "node" edge with a given conditions (other predicates).
func HasNodeWith(preds ...predicate.Node) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(func(s *sql.Selector) {
		step := newNodeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NodeTimeEntry) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NodeTimeEntry) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NodeTimeEntry) predicate.NodeTimeEntry {
	return predicate.NodeTimeEntry(sql.NotPredicates(p))
}
