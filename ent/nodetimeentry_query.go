// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/realm76/ranger/ent/node"
	"github.com/realm76/ranger/ent/nodetimeentry"
	"github.com/realm76/ranger/ent/predicate"
)

// NodeTimeEntryQuery is the builder for querying NodeTimeEntry entities.
type NodeTimeEntryQuery struct {
	config
	ctx        *QueryContext
	order      []nodetimeentry.OrderOption
	inters     []Interceptor
	predicates []predicate.NodeTimeEntry
	withNode   *NodeQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the NodeTimeEntryQuery builder.
func (nteq *NodeTimeEntryQuery) Where(ps ...predicate.NodeTimeEntry) *NodeTimeEntryQuery {
	nteq.predicates = append(nteq.predicates, ps...)
	return nteq
}

// Limit the number of records to be returned by this query.
func (nteq *NodeTimeEntryQuery) Limit(limit int) *NodeTimeEntryQuery {
	nteq.ctx.Limit = &limit
	return nteq
}

// Offset to start from.
func (nteq *NodeTimeEntryQuery) Offset(offset int) *NodeTimeEntryQuery {
	nteq.ctx.Offset = &offset
	return nteq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (nteq *NodeTimeEntryQuery) Unique(unique bool) *NodeTimeEntryQuery {
	nteq.ctx.Unique = &unique
	return nteq
}

// Order specifies how the records should be ordered.
func (nteq *NodeTimeEntryQuery) Order(o ...nodetimeentry.OrderOption) *NodeTimeEntryQuery {
	nteq.order = append(nteq.order, o...)
	return nteq
}

// QueryNode chains the current query on the "node" edge.
func (nteq *NodeTimeEntryQuery) QueryNode() *NodeQuery {
	query := (&NodeClient{config: nteq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nteq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nteq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(nodetimeentry.Table, nodetimeentry.FieldID, selector),
			sqlgraph.To(node.Table, node.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, nodetimeentry.NodeTable, nodetimeentry.NodeColumn),
		)
		fromU = sqlgraph.SetNeighbors(nteq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first NodeTimeEntry entity from the query.
// Returns a *NotFoundError when no NodeTimeEntry was found.
func (nteq *NodeTimeEntryQuery) First(ctx context.Context) (*NodeTimeEntry, error) {
	nodes, err := nteq.Limit(1).All(setContextOp(ctx, nteq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{nodetimeentry.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (nteq *NodeTimeEntryQuery) FirstX(ctx context.Context) *NodeTimeEntry {
	node, err := nteq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first NodeTimeEntry ID from the query.
// Returns a *NotFoundError when no NodeTimeEntry ID was found.
func (nteq *NodeTimeEntryQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = nteq.Limit(1).IDs(setContextOp(ctx, nteq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{nodetimeentry.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (nteq *NodeTimeEntryQuery) FirstIDX(ctx context.Context) int {
	id, err := nteq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single NodeTimeEntry entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one NodeTimeEntry entity is found.
// Returns a *NotFoundError when no NodeTimeEntry entities are found.
func (nteq *NodeTimeEntryQuery) Only(ctx context.Context) (*NodeTimeEntry, error) {
	nodes, err := nteq.Limit(2).All(setContextOp(ctx, nteq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{nodetimeentry.Label}
	default:
		return nil, &NotSingularError{nodetimeentry.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (nteq *NodeTimeEntryQuery) OnlyX(ctx context.Context) *NodeTimeEntry {
	node, err := nteq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only NodeTimeEntry ID in the query.
// Returns a *NotSingularError when more than one NodeTimeEntry ID is found.
// Returns a *NotFoundError when no entities are found.
func (nteq *NodeTimeEntryQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = nteq.Limit(2).IDs(setContextOp(ctx, nteq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{nodetimeentry.Label}
	default:
		err = &NotSingularError{nodetimeentry.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (nteq *NodeTimeEntryQuery) OnlyIDX(ctx context.Context) int {
	id, err := nteq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of NodeTimeEntries.
func (nteq *NodeTimeEntryQuery) All(ctx context.Context) ([]*NodeTimeEntry, error) {
	ctx = setContextOp(ctx, nteq.ctx, ent.OpQueryAll)
	if err := nteq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*NodeTimeEntry, *NodeTimeEntryQuery]()
	return withInterceptors[[]*NodeTimeEntry](ctx, nteq, qr, nteq.inters)
}

// AllX is like All, but panics if an error occurs.
func (nteq *NodeTimeEntryQuery) AllX(ctx context.Context) []*NodeTimeEntry {
	nodes, err := nteq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of NodeTimeEntry IDs.
func (nteq *NodeTimeEntryQuery) IDs(ctx context.Context) (ids []int, err error) {
	if nteq.ctx.Unique == nil && nteq.path != nil {
		nteq.Unique(true)
	}
	ctx = setContextOp(ctx, nteq.ctx, ent.OpQueryIDs)
	if err = nteq.Select(nodetimeentry.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (nteq *NodeTimeEntryQuery) IDsX(ctx context.Context) []int {
	ids, err := nteq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (nteq *NodeTimeEntryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, nteq.ctx, ent.OpQueryCount)
	if err := nteq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, nteq, querierCount[*NodeTimeEntryQuery](), nteq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (nteq *NodeTimeEntryQuery) CountX(ctx context.Context) int {
	count, err := nteq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (nteq *NodeTimeEntryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, nteq.ctx, ent.OpQueryExist)
	switch _, err := nteq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (nteq *NodeTimeEntryQuery) ExistX(ctx context.Context) bool {
	exist, err := nteq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the NodeTimeEntryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (nteq *NodeTimeEntryQuery) Clone() *NodeTimeEntryQuery {
	if nteq == nil {
		return nil
	}
	return &NodeTimeEntryQuery{
		config:     nteq.config,
		ctx:        nteq.ctx.Clone(),
		order:      append([]nodetimeentry.OrderOption{}, nteq.order...),
		inters:     append([]Interceptor{}, nteq.inters...),
		predicates: append([]predicate.NodeTimeEntry{}, nteq.predicates...),
		withNode:   nteq.withNode.Clone(),
		// clone intermediate query.
		sql:  nteq.sql.Clone(),
		path: nteq.path,
	}
}

// WithNode tells the query-builder to eager-load the nodes that are connected to
// the "node" edge. The optional arguments are used to configure the query builder of the edge.
func (nteq *NodeTimeEntryQuery) WithNode(opts ...func(*NodeQuery)) *NodeTimeEntryQuery {
	query := (&NodeClient{config: nteq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	nteq.withNode = query
	return nteq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		NodeId int `json:"nodeId,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.NodeTimeEntry.Query().
//		GroupBy(nodetimeentry.FieldNodeId).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (nteq *NodeTimeEntryQuery) GroupBy(field string, fields ...string) *NodeTimeEntryGroupBy {
	nteq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &NodeTimeEntryGroupBy{build: nteq}
	grbuild.flds = &nteq.ctx.Fields
	grbuild.label = nodetimeentry.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		NodeId int `json:"nodeId,omitempty"`
//	}
//
//	client.NodeTimeEntry.Query().
//		Select(nodetimeentry.FieldNodeId).
//		Scan(ctx, &v)
func (nteq *NodeTimeEntryQuery) Select(fields ...string) *NodeTimeEntrySelect {
	nteq.ctx.Fields = append(nteq.ctx.Fields, fields...)
	sbuild := &NodeTimeEntrySelect{NodeTimeEntryQuery: nteq}
	sbuild.label = nodetimeentry.Label
	sbuild.flds, sbuild.scan = &nteq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a NodeTimeEntrySelect configured with the given aggregations.
func (nteq *NodeTimeEntryQuery) Aggregate(fns ...AggregateFunc) *NodeTimeEntrySelect {
	return nteq.Select().Aggregate(fns...)
}

func (nteq *NodeTimeEntryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range nteq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, nteq); err != nil {
				return err
			}
		}
	}
	for _, f := range nteq.ctx.Fields {
		if !nodetimeentry.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if nteq.path != nil {
		prev, err := nteq.path(ctx)
		if err != nil {
			return err
		}
		nteq.sql = prev
	}
	return nil
}

func (nteq *NodeTimeEntryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*NodeTimeEntry, error) {
	var (
		nodes       = []*NodeTimeEntry{}
		withFKs     = nteq.withFKs
		_spec       = nteq.querySpec()
		loadedTypes = [1]bool{
			nteq.withNode != nil,
		}
	)
	if nteq.withNode != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, nodetimeentry.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*NodeTimeEntry).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &NodeTimeEntry{config: nteq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, nteq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := nteq.withNode; query != nil {
		if err := nteq.loadNode(ctx, query, nodes, nil,
			func(n *NodeTimeEntry, e *Node) { n.Edges.Node = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (nteq *NodeTimeEntryQuery) loadNode(ctx context.Context, query *NodeQuery, nodes []*NodeTimeEntry, init func(*NodeTimeEntry), assign func(*NodeTimeEntry, *Node)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*NodeTimeEntry)
	for i := range nodes {
		if nodes[i].node_time_entries == nil {
			continue
		}
		fk := *nodes[i].node_time_entries
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(node.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "node_time_entries" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (nteq *NodeTimeEntryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := nteq.querySpec()
	_spec.Node.Columns = nteq.ctx.Fields
	if len(nteq.ctx.Fields) > 0 {
		_spec.Unique = nteq.ctx.Unique != nil && *nteq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, nteq.driver, _spec)
}

func (nteq *NodeTimeEntryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(nodetimeentry.Table, nodetimeentry.Columns, sqlgraph.NewFieldSpec(nodetimeentry.FieldID, field.TypeInt))
	_spec.From = nteq.sql
	if unique := nteq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if nteq.path != nil {
		_spec.Unique = true
	}
	if fields := nteq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nodetimeentry.FieldID)
		for i := range fields {
			if fields[i] != nodetimeentry.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := nteq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := nteq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := nteq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := nteq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (nteq *NodeTimeEntryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(nteq.driver.Dialect())
	t1 := builder.Table(nodetimeentry.Table)
	columns := nteq.ctx.Fields
	if len(columns) == 0 {
		columns = nodetimeentry.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if nteq.sql != nil {
		selector = nteq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if nteq.ctx.Unique != nil && *nteq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range nteq.predicates {
		p(selector)
	}
	for _, p := range nteq.order {
		p(selector)
	}
	if offset := nteq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := nteq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// NodeTimeEntryGroupBy is the group-by builder for NodeTimeEntry entities.
type NodeTimeEntryGroupBy struct {
	selector
	build *NodeTimeEntryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ntegb *NodeTimeEntryGroupBy) Aggregate(fns ...AggregateFunc) *NodeTimeEntryGroupBy {
	ntegb.fns = append(ntegb.fns, fns...)
	return ntegb
}

// Scan applies the selector query and scans the result into the given value.
func (ntegb *NodeTimeEntryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ntegb.build.ctx, ent.OpQueryGroupBy)
	if err := ntegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NodeTimeEntryQuery, *NodeTimeEntryGroupBy](ctx, ntegb.build, ntegb, ntegb.build.inters, v)
}

func (ntegb *NodeTimeEntryGroupBy) sqlScan(ctx context.Context, root *NodeTimeEntryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ntegb.fns))
	for _, fn := range ntegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ntegb.flds)+len(ntegb.fns))
		for _, f := range *ntegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ntegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ntegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// NodeTimeEntrySelect is the builder for selecting fields of NodeTimeEntry entities.
type NodeTimeEntrySelect struct {
	*NodeTimeEntryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ntes *NodeTimeEntrySelect) Aggregate(fns ...AggregateFunc) *NodeTimeEntrySelect {
	ntes.fns = append(ntes.fns, fns...)
	return ntes
}

// Scan applies the selector query and scans the result into the given value.
func (ntes *NodeTimeEntrySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ntes.ctx, ent.OpQuerySelect)
	if err := ntes.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*NodeTimeEntryQuery, *NodeTimeEntrySelect](ctx, ntes.NodeTimeEntryQuery, ntes, ntes.inters, v)
}

func (ntes *NodeTimeEntrySelect) sqlScan(ctx context.Context, root *NodeTimeEntryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ntes.fns))
	for _, fn := range ntes.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ntes.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ntes.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
