//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Entries = newEntriesTable("public", "entries", "")

type entriesTable struct {
	postgres.Table

	// Columns
	ID          postgres.ColumnInteger
	UserID      postgres.ColumnInteger
	ProjectID   postgres.ColumnInteger
	Description postgres.ColumnString
	StartDate   postgres.ColumnDate
	EndDate     postgres.ColumnDate
	CreatedAt   postgres.ColumnTimestamp
	UpdatedAt   postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type EntriesTable struct {
	entriesTable

	EXCLUDED entriesTable
}

// AS creates new EntriesTable with assigned alias
func (a EntriesTable) AS(alias string) *EntriesTable {
	return newEntriesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new EntriesTable with assigned schema name
func (a EntriesTable) FromSchema(schemaName string) *EntriesTable {
	return newEntriesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new EntriesTable with assigned table prefix
func (a EntriesTable) WithPrefix(prefix string) *EntriesTable {
	return newEntriesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new EntriesTable with assigned table suffix
func (a EntriesTable) WithSuffix(suffix string) *EntriesTable {
	return newEntriesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newEntriesTable(schemaName, tableName, alias string) *EntriesTable {
	return &EntriesTable{
		entriesTable: newEntriesTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newEntriesTableImpl("", "excluded", ""),
	}
}

func newEntriesTableImpl(schemaName, tableName, alias string) entriesTable {
	var (
		IDColumn          = postgres.IntegerColumn("id")
		UserIDColumn      = postgres.IntegerColumn("user_id")
		ProjectIDColumn   = postgres.IntegerColumn("project_id")
		DescriptionColumn = postgres.StringColumn("description")
		StartDateColumn   = postgres.DateColumn("start_date")
		EndDateColumn     = postgres.DateColumn("end_date")
		CreatedAtColumn   = postgres.TimestampColumn("created_at")
		UpdatedAtColumn   = postgres.TimestampColumn("updated_at")
		allColumns        = postgres.ColumnList{IDColumn, UserIDColumn, ProjectIDColumn, DescriptionColumn, StartDateColumn, EndDateColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns    = postgres.ColumnList{UserIDColumn, ProjectIDColumn, DescriptionColumn, StartDateColumn, EndDateColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return entriesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		UserID:      UserIDColumn,
		ProjectID:   ProjectIDColumn,
		Description: DescriptionColumn,
		StartDate:   StartDateColumn,
		EndDate:     EndDateColumn,
		CreatedAt:   CreatedAtColumn,
		UpdatedAt:   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
