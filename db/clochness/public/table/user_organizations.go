//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserOrganizations = newUserOrganizationsTable("public", "user_organizations", "")

type userOrganizationsTable struct {
	postgres.Table

	// Columns
	UserID         postgres.ColumnInteger
	OrganizationID postgres.ColumnInteger
	Role           postgres.ColumnString
	JoinedAt       postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserOrganizationsTable struct {
	userOrganizationsTable

	EXCLUDED userOrganizationsTable
}

// AS creates new UserOrganizationsTable with assigned alias
func (a UserOrganizationsTable) AS(alias string) *UserOrganizationsTable {
	return newUserOrganizationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserOrganizationsTable with assigned schema name
func (a UserOrganizationsTable) FromSchema(schemaName string) *UserOrganizationsTable {
	return newUserOrganizationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserOrganizationsTable with assigned table prefix
func (a UserOrganizationsTable) WithPrefix(prefix string) *UserOrganizationsTable {
	return newUserOrganizationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserOrganizationsTable with assigned table suffix
func (a UserOrganizationsTable) WithSuffix(suffix string) *UserOrganizationsTable {
	return newUserOrganizationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserOrganizationsTable(schemaName, tableName, alias string) *UserOrganizationsTable {
	return &UserOrganizationsTable{
		userOrganizationsTable: newUserOrganizationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:               newUserOrganizationsTableImpl("", "excluded", ""),
	}
}

func newUserOrganizationsTableImpl(schemaName, tableName, alias string) userOrganizationsTable {
	var (
		UserIDColumn         = postgres.IntegerColumn("user_id")
		OrganizationIDColumn = postgres.IntegerColumn("organization_id")
		RoleColumn           = postgres.StringColumn("role")
		JoinedAtColumn       = postgres.TimestampColumn("joined_at")
		allColumns           = postgres.ColumnList{UserIDColumn, OrganizationIDColumn, RoleColumn, JoinedAtColumn}
		mutableColumns       = postgres.ColumnList{RoleColumn, JoinedAtColumn}
	)

	return userOrganizationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:         UserIDColumn,
		OrganizationID: OrganizationIDColumn,
		Role:           RoleColumn,
		JoinedAt:       JoinedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
