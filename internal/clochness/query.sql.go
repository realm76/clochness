// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package clochness

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEntry = `-- name: CreateEntry :one
INSERT INTO entries (
                     user_id,
                     project_id,
                     description,
                     start_date,
                     end_date
)
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5
       )
RETURNING id, user_id, project_id, description, start_date, end_date, created_at, updated_at
`

type CreateEntryParams struct {
	UserID      int32
	ProjectID   pgtype.Int4
	Description string
	StartDate   pgtype.Date
	EndDate     pgtype.Date
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRow(ctx, createEntry,
		arg.UserID,
		arg.ProjectID,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
	)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProjectID,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteEntry = `-- name: DeleteEntry :exec
DELETE
FROM entries
WHERE id = $1
`

func (q *Queries) DeleteEntry(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteEntry, id)
	return err
}

const getEntry = `-- name: GetEntry :one
SELECT id, user_id, project_id, description, start_date, end_date, created_at, updated_at
FROM entries
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetEntry(ctx context.Context, id int32) (Entry, error) {
	row := q.db.QueryRow(ctx, getEntry, id)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProjectID,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEntries = `-- name: ListEntries :many
SELECT id, user_id, project_id, description, start_date, end_date, created_at, updated_at
FROM entries
ORDER BY created_at DESC
`

func (q *Queries) ListEntries(ctx context.Context) ([]Entry, error) {
	rows, err := q.db.Query(ctx, listEntries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProjectID,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntry = `-- name: UpdateEntry :exec
UPDATE entries
set user_id = $2,
    project_id  = $3,
    description = $4,
    start_date = $5,
    end_date = $6
WHERE id = $1
`

type UpdateEntryParams struct {
	ID          int32
	UserID      int32
	ProjectID   pgtype.Int4
	Description string
	StartDate   pgtype.Date
	EndDate     pgtype.Date
}

func (q *Queries) UpdateEntry(ctx context.Context, arg UpdateEntryParams) error {
	_, err := q.db.Exec(ctx, updateEntry,
		arg.ID,
		arg.UserID,
		arg.ProjectID,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
	)
	return err
}
